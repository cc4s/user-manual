#+title: Quick Start: Periodic LiH calculation using VASP

* Introduction

In this tutorial we are going to present a simple application
of =cc4s= by performing a =CCSD= and =CCSD(T)= calculation
of a LiH crystal.

For this, we will utilize the [[https://www.vasp.at][=VASP=]] interface that is included
in =cc4s=. Please note that you should be moderately experienced
in =VASP= to follow along.

The atomic structure of the system is given by the =POSCAR= file

<poscar>=
#+name: poscar
#+begin_src emacs-lisp
Li4 H4
1.0
4.000174 0.000000 0.000000
0.000000 4.000174 0.000000
0.000000 0.000000 4.000174
Li H
4 4
direct
0.000000 0.000000 0.000000
0.000000 0.500000 0.500000
0.500000 0.000000 0.500000
0.500000 0.500000 0.000000
0.500000 0.000000 0.000000
0.500000 0.500000 0.500000
0.000000 0.000000 0.500000
0.000000 0.500000 0.000000
#+end_src

This example uses a \( \Gamma \)-only version of =VASP=, this means
that we use a single \( k \)-point, i.e., the \( \Gamma \) point.
In particular the Coulomb integrals are therefore real valued.
The =KPOINTS= file is thus

<kpoints>=
#+name: kpoints
#+begin_src sh
Gamma Point Mesh
       0
gamma
 1 1 1
#+end_src



* TODO DFT Calculation

<dft-incar>=
#+name: dft-incar
#+begin_src shell
ENCUT = $enc
EDIFF = 1E-6
#+end_src


* TODO Hartree-Fock calculation

A Hartree-Fock calculation is given by the following =INCAR=
input

<hf-incar>=
#+name: hf-incar
#+begin_src shell
ENCUT   = $enc
EDIFF   = 1E-6
LHFCALC =.TRUE.
AEXX    = 1.0
ALGO    = C
#+end_src


* TODO Full Space Diagonalization

<hf-diagonalization-incar>=
#+name: hf-diagonalization-incar
#+begin_src sh
ENCUT   = $enc
EDIFF   = 1E-6
LHFCALC = .TRUE.
AEXX    = 1.0
ISYM    = -1
ALGO    = sub
NELM    = 1
NBANDS  = $nb
#+end_src


* TODO =CC4S= dumping

<cc4s-incar>=
#+name: cc4s-incar
#+begin_src sh
ENCUT      = $enc
EDIFF      = 1E-6
LHFCALC    = .TRUE.
AEXX       = 1.0
ISYM       = -1
ALGO       = CC4S
NBANDS     = $nb
NBANDSHIGH = $nb
#+end_src

this step the following files will be written that are needed for CC4S

- $F_{pq}$ :: =FockOperator.yaml=, =FockOperator.dat=
- $\vec G$ :: =GridVectors.yaml=, =GridVectors.dat=
- $V(\vec G)$ :: =CoulombPotential.yaml=, =CoulombPotential.dat=
- $\delta^{ab}_{ij}$ :: =DeltaPPHH.yaml=, =DeltaPPHH.dat=
- $\delta_{ij}$ :: =DeltaHH.yaml=, =DeltaHH.dat=
- =CoulombVertexSingularVectors.yaml=, =CoulombVertexSingularVectors.dat=
- $\Gamma^{pG}_{q}$ ::  =CoulombVertex.yaml=, =CoulombVertex.dat=
- $\epsilon_{p}$ :: =EigenEnergies.yaml=, =EigenEnergies.dat=
- =Spins.yaml=, =Spins.dat=


* TODO Cc4s Calculation
** Reading in


#+begin_src yaml :noweb-ref cc4s-in
- name: TensorReader
  in:
    fileName: "EigenEnergies.yaml"
  out:
    tensor: EigenEnergies

- name: TensorReader
  in:
    fileName: "CoulombVertex.yaml"
  out:
    tensor: CoulombVertex

- name: TensorReader
  in:
    fileName: "CoulombVertexSingularVectors.yaml"
  out:
    tensor: CoulombVertexSingularVectors

- name: TensorReader
  in:
    fileName: "GridVectors.yaml"
  out:
    tensor: GridVectors

- name: TensorReader
  in:
    fileName: "CoulombPotential.yaml"
  out:
    tensor: CoulombPotential
#+end_src


#+begin_src yaml :noweb-ref cc4s-in
- name: DefineHolesAndParticles
  in:
    eigenEnergies: EigenEnergies
  out:
    slicedEigenEnergies: EigenEnergies

- name: SliceOperator
  in:
    slicedEigenEnergies: EigenEnergies
    operator: CoulombVertex
  out:
    slicedOperator: CoulombVertex
#+end_src

#+begin_src yaml :noweb-ref cc4s-in
- name: CoulombIntegralsFromVertex
  in:
    slicedCoulombVertex: CoulombVertex
  out:
    coulombIntegrals: CoulombIntegrals
#+end_src


** CCSD and CCSD(T)

#+begin_src yaml :noweb-ref cc4s-in
- name: CcsdEnergyFromCoulombIntegrals
  in:
    integralsSliceSize: 100
    slicedEigenEnergies: EigenEnergies
    coulombIntegrals: CoulombIntegrals
    slicedCoulombVertex: CoulombVertex
    maxIterations: 1
    energyConvergence: 1.0E-5
    amplitudesConvergence: 1.0E-5
    mixer:
      type: DiisMixer
  out:
    energy: CcsdEnergy
    amplitudes: Amplitudes

- name: StructureFactor
  in:
    amplitudes: Amplitudes
    slicedCoulombVertex: CoulombVertex
    coulombVertexSingularVectors: CoulombVertexSingularVectors
    coulombPotential: CoulombPotential
  out:
    structureFactor: SF
    deltaIntegrals: DeltaInt
    nij: Nij

- name: FiniteSizeCorrection
  in:
    gridVectors: GridVectors
    structureFactor: SF
  out:
    corrected: Corrected
    uncorrected: Uncorrected

- name: Atrip
  in:
    slicedEigenEnergies: EigenEnergies
    amplitudes: Amplitudes
    coulombIntegrals: CoulombIntegrals
  out:
    energy: AtripEnergy
#+end_src
* Putting all together

We can put all together in a compact script
that can serve as a starting point to test further variations.
Using the references above

#+begin_src C :noweb tangle :tangle run-simple-lih.sh
#!/bin/bash

NTASKS=48

export OMP_NUM_THREADS=1

VASPBIN="/home/fs71337/grueneis4/src/vasp-edge/bin/vasp_gam"
CC4SBIN="/home/fs71337/grueneis4/src/demo/cc4s/build/icc_impi/bin/Cc4s"
VASP="mpirun -machinefile machinefile -np $NTASKS $VASPBIN"
CC4S="mpirun -machinefile machinefile -np $NTASKS $CC4SBIN"

enc=150
egw=100


cat | tee POSCAR <<EOF
<<poscar>>
EOF

cat | tee KPOINTS <<EOF
<<kpoints>>
EOF

test -f WAVECAR && rm WAVECAR

echo "++++++++++++++++++++++++++++++"
echo "RUN DFT to get a converged guess for HF"
echo "++++++++++++++++++++++++++++++"

cat >INCAR <<EOF
<<dft-incar>>
EOF
cat INCAR
$VASP
cp OUTCAR OUTCAR.DFT


echo "++++++++++++++++++++++++++++++"
echo "RUN HF"
echo "++++++++++++++++++++++++++++++"

cat | tee INCAR <<EOF
<<hf-incar>>
EOF
$VASP
cp OUTCAR OUTCAR.HF


nb=$(awk <OUTCAR '
      /maximum number of plane-waves:/ {
       print $5*2-1
      }
    ')


echo "++++++++++++++++++++++++++++++"
echo "RUN HF diag"
echo "++++++++++++++++++++++++++++++"


cat | tee INCAR <<EOF
<<hf-diagonalization-incar>>
EOF
$VASP
cp OUTCAR OUTCAR.HFdiag

echo "++++++++++++++++++++++++++++++"
echo "Dump CC4S input using " $nb " bands."
echo "++++++++++++++++++++++++++++++"


cat | tee INCAR <<EOF
<<cc4s-incar>>
EOF
$VASP
cp OUTCAR OUTCAR.CC4S


echo "++++++++++++++++++++++++++++++"
echo "Run CC4S using " $nb " bands."
echo "++++++++++++++++++++++++++++++"

cat | tee cc4s.in <<EOF
<<cc4s-in>>
EOF

$CC4S -i cc4s.in | tee  cc4s.stdout
#+end_src

